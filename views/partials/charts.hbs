<script type="text/javascript" src="echarts/echarts.js"></script>
<script type="text/javascript">
	var chartA;
	var chartB;
	var chartC;
	var gaugeWidth;

	$(document).ready(function () {
		initializeCharts();
		gaugeWidth = $('.gauge').width();
		hideCharts();
	});

	function showAssigneeChart(stats) {
		var chartData = [];
		for (var assignee in stats.assigneeStats) {
			chartData.push({
				name: assignee,
				value: stats.assigneeStats[assignee]
			});
		}
		var option = {
		    tooltip: {
		        trigger: 'item',
		        formatter: "{b}: {d}%"
		    },
		    title: {
            	show: true,
            	text: 'Assignees',
            	left: 'center',
            	top: 'middle',
            	textStyle: {
            		fontSize: 15,
            		fontFamily: 'PT Sans',
            		fontWeight: 'normal'
            	}
            },
		    series: [
		        {
		            name:'Owners',
		            type:'pie',
		            radius: ['50%', '70%'],
		            avoidLabelOverlap: false,
		            hoverAnimation: false,
		            color: app.config.palette,
		            label: {
		                normal: {
		                    show: true,
		                    position: 'right',
		                    textStyle: {
		                    	fontSize: 10
		                    }
		                },
		                emphasis: {
		                    show: true,
		                    textStyle: {
		                        fontSize: 12,
		                        fontWeight: 'bold'
		                    }
		                }
		            },
		            labelLine: {
		                normal: {
		                    show: true,
		                    length: 10,
		                    length2: 10,
		                    smooth: true
		                }
		            },
		            data: chartData
		        }
		    ]
		};
		chartC.setOption(option);
	}

	function showOriginalityScore(stats) {
		var oScore = stats.oScore;
		var oClass = '';
		if (oScore <=30) {
			oClass = 'Low';
		} else if (oScore > 30 && oScore < 70) {
			oClass = 'Medium';
		} else {
			oClass = 'High';
		}
		$('#gauge-text').text('Originality score: ' + oClass);
		
		var dx = 6;
		var x = (0.01 * oScore * gaugeWidth) - dx;
		$('#gauge-pointer').css('left', x + 'px');
		console.log(oScore, oClass, x, dx);

		var L = $('#chart-a').height();
		var l = $('.linear-gauge-container').height();
		var pt = 0.4*(L-l);
		$('.linear-gauge-container').css('padding-top', pt + 'px');
	}

	function showFilingTrend(stats) {
		var xData = [];
		var yData = [];
		for (var year in stats.yearStats) {
			xData.push(year);
			yData.push(stats.yearStats[year])
		}
		var option = {
			xAxis: {
		        type: 'category',
		        data: xData,
		        name: 'Year',
		        nameLocation: 'center',
		        nameGap: 20,
		        axisLine: {
		        	lineStyle: {
		        		width: 2,
		        		color: '#2C82C9'
		        	}
		        }
		    },
		    yAxis: {
		        type: 'value',
		        name: 'Patents %',
		        nameLocation: 'end',
		        axisLine: {
		        	lineStyle: {
		        		width: 2,
		        		color: '#2C82C9'
		        	}
		        }
		    },
		    series: [{
		        data: yData,
		        type: 'line',
		        smooth: true
		    }],
		    itemStyle: {
		    	color: '#2C82C9'
		    },
		    lineStyle: {
		    	color: '#2C82C9'
		    },
		    areaStyle: {
		    	color: '#DDD'
		    },
		    grid: {
		    	show: false
		    }
		};
		chartB.setOption(option);
	}

	$(window).resize(function(){
		if (app.config.chartsDisabled) {
			return;
		}
  		initializeCharts();
  		updateCharts(app.state.stats);
	});

	function updateCharts(stats) {
		showAssigneeChart(stats);
		showFilingTrend(stats);
		showCharts();
		showOriginalityScore(stats);
	}
	function hideCharts() {
		$('#charts-pane').slideUp();
	}

	function hideChartsQuick() {
		$('#charts-pane').css('display', 'none');
	}

	function showCharts() {
		$('.curtain').addClass('hidden');
		$('#charts-pane').slideDown();
	}

	function getStats(query, techDomain, callback) {
		if (app.config.chartsDisabled) {
			return callback(true);
		}
		callMediator({
			cmd: 'get-stats',
			query,
			techDomain
		}, function (stats) {
			app.state.stats = stats;
			updateCharts(stats);
			callback(true);
		});
	}
</script>